name: Deploy to Google Cloud

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PROJECT_ID: transcription-service-prod
  REGION: us-central1
  SERVICE_NAME: transcription-service
  WORKER_SERVICE_NAME: transcription-worker

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Create GCS bucket
      run: |
        gsutil mb -p $PROJECT_ID -c STANDARD -l $REGION gs://$PROJECT_ID-transcription-files || echo "Bucket exists"
        gsutil lifecycle set lifecycle.json gs://$PROJECT_ID-transcription-files || echo "Lifecycle policy not set"

    - name: Create Redis instance
      run: |
        gcloud redis instances create transcription-redis \
          --size=1 \
          --region=$REGION \
          --redis-version=redis_6_x \
          --project=$PROJECT_ID || echo "Redis instance exists"

    - name: Get Redis IP
      id: redis
      run: |
        REDIS_IP=$(gcloud redis instances describe transcription-redis --region=$REGION --format="get(host)" --project=$PROJECT_ID)
        echo "REDIS_URL=redis://$REDIS_IP:6379/0" >> $GITHUB_OUTPUT

    - name: Deploy API service
      run: |
        gcloud run deploy $SERVICE_NAME \
          --source . \
          --region=$REGION \
          --platform=managed \
          --allow-unauthenticated \
          --port=8000 \
          --memory=2Gi \
          --cpu=1 \
          --max-instances=10 \
          --min-instances=0 \
          --set-env-vars="ENVIRONMENT=production" \
          --set-env-vars="GCS_BUCKET_NAME=$PROJECT_ID-transcription-files" \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=$PROJECT_ID" \
          --set-env-vars="REDIS_URL=${{ steps.redis.outputs.REDIS_URL }}" \
          --set-env-vars="OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
          --set-env-vars="GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
          --project=$PROJECT_ID

    - name: Deploy Worker service
      run: |
        gcloud run deploy $WORKER_SERVICE_NAME \
          --source . \
          --dockerfile worker.Dockerfile \
          --region=$REGION \
          --platform=managed \
          --no-allow-unauthenticated \
          --memory=2Gi \
          --cpu=2 \
          --max-instances=5 \
          --min-instances=1 \
          --set-env-vars="ENVIRONMENT=production" \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=$PROJECT_ID" \
          --set-env-vars="REDIS_URL=${{ steps.redis.outputs.REDIS_URL }}" \
          --set-env-vars="GCS_BUCKET_NAME=$PROJECT_ID-transcription-files" \
          --set-env-vars="OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
          --set-env-vars="GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
          --project=$PROJECT_ID

    - name: Get service URL
      id: url
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="get(status.url)" --project=$PROJECT_ID)
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "🌐 Service URL: $SERVICE_URL"

    - name: Test deployment
      run: |
        sleep 30
        curl -f ${{ steps.url.outputs.SERVICE_URL }}/health || exit 1
        echo "✅ Deployment successful!"